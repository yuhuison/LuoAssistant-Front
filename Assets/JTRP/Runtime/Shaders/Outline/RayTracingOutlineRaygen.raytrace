#pragma max_recursion_depth 10
// WARNING: This define must be kept in sync with the c# code
#define RAYTRACING_MAX_RECURSION 10

// HDRP include
#define SHADER_TARGET 50
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Macros.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariablesFunctions.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"

// Raytracing includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingSampling.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/RayTracing/Shaders/Common/AtmosphericScatteringRayTracing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/RayCountManager.cs.hlsl"

RWTexture2D<float4> RenderTarget;

TEXTURE2D_X(_DepthTexture);
TEXTURE2D_X(_OutlineMask);

[shader("miss")]
void MissShaderRenderer(inout RayIntersection rayIntersection: SV_RayPayload)
{
	// rayIntersection.color = float3(0.25, 0.25, 0.25);
}

[shader("raygeneration")]
void RayTracingOutlineRaygen()
{
	uint2 dispatchIdx = DispatchRaysIndex().xy;
	uint2 currentPixelCoord = dispatchIdx;

	if (_OutlineMask[COORD_TEXTURE2D_X(currentPixelCoord)].x == 0.0)
		return;

	float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentPixelCoord).x;

	// Convert this to a world space position
	PositionInputs posInput = GetPositionInput(currentPixelCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);
	float3 originWS = GetPrimaryCameraPosition();
	float3 incidentWS = normalize(posInput.positionWS - originWS);

	// Create the ray descriptor for this pixel
	RayDesc rayDescriptor;
	rayDescriptor.Origin = originWS;
	rayDescriptor.Direction = incidentWS;
	rayDescriptor.TMin = 0.1;
	rayDescriptor.TMax = 100;

	// Create and init the RayIntersection structure for this
	RayIntersection rayIntersection;
	rayIntersection.color = float3(0.0, 0.0, 0.0);
	rayIntersection.incidentDirection = rayDescriptor.Direction;
	rayIntersection.origin = rayDescriptor.Origin;
	rayIntersection.t = 0.0f;
	rayIntersection.remainingDepth = min(RAYTRACING_MAX_RECURSION, _RaytracingMaxRecursion) - 1;
	rayIntersection.rayCount = 1;
	rayIntersection.pixelCoord = currentPixelCoord;


	TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, RAYTRACINGRENDERERFLAG_OPAQUE, 0, 1, 0, rayDescriptor, rayIntersection);
	
	// JTRP: rayIntersection.rayCount as output flag
	if (rayIntersection.rayCount > 1)
		RenderTarget[dispatchIdx] = float4(rayIntersection.color, 1);
}
